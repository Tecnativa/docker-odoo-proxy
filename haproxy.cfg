global
    log         127.0.0.1 local2

    pidfile     /run/haproxy.pid
    maxconn     4000

    # Turn on stats unix socket
    server-state-file /var/lib/haproxy/server-state

defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          10m
    timeout server          10m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

    # Allow seamless reloads
    load-server-state-from-file global

    # Use provided example error pages
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

backend odoo
    server odoo $ODOO

backend longpolling
    server longpolling $LONGPOLLING

frontend plain
    bind :80

    # Standard headers to inform app about inverse proxy status
    http-request set-header X-Forwarded-Host        %[req.hdr(host)]
    http-request set-header X-Forwarded-For         %[src]

    # Send to right backend
    http-request set-var(req.path) path
    acl longpolling_url var(req.path) -m dir /longpolling
    use_backend longpolling if longpolling_url
    default_backend odoo
